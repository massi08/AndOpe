<h4 skip="true">Lifecycle</h4><p><span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="Chaque">Chaque</span> instance de vue traverse une <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="série">s&eacute;rie</span> d&rsquo;<span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="étapes">&eacute;tapes</span> d&rsquo;<span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="initialisation">initialisation</span> au moment de sa <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="création">cr&eacute;ation</span> - par <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="exemple">exemple</span>, <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="elle">elle</span> <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="doit">doit</span> <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="mettre">mettre</span> en place l&rsquo;observation des <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="données">donn&eacute;es</span>, compiler le template, <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="monter">monter</span> l&rsquo;instance sur le DOM et <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="mettre">mettre</span> &agrave; jour le DOM <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="quand">quand</span> les <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="données">donn&eacute;es</span> changent. En cours de route, <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="elle">elle</span> va aussi invoquer des hooks de cycle de vie, qui nous donnent l&rsquo;opportunit&eacute; d&rsquo;ex&eacute;cuter une logique personnalis&eacute;e. Par <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="exemple">exemple</span>, le hook <strong>created&nbsp;</strong>est appel&eacute; une fois l&rsquo;instance cr&eacute;&eacute;e.</p><pre>var vm = new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` est une r&eacute;f&eacute;rence &agrave; l&#39;instance de vm
    console.log(&#39;a is: &#39; + this.a)
  }
})
// -&gt; &quot;a is: 1&quot;</pre><p>Il y aussi d&rsquo;autres hooks qui seront appel&eacute;s &agrave; diff&eacute;rentes <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="étapes">&eacute;tapes</span> du cycle de vie d&rsquo;une instance, par <span class="scayt-misspell-word" data-scayt-lang="en_US" data-scayt-word="exemple">exemple</span> <strong>mounted</strong>, <strong>updated&nbsp;</strong>et <strong>destroyed</strong>. Tous ces hooks de cycle de vie sont appel&eacute;s avec leur <strong>this&nbsp;</strong>pointant sur l&rsquo;instance de la vue qui les invoque. Vous vous &ecirc;tes peut-&ecirc;tre demand&eacute; o&ugrave; se trouvait le concept de &laquo; contr&ocirc;leur &raquo; dans le monde de Vue et la r&eacute;ponse est : il n&rsquo;y pas de contr&ocirc;leurs. Votre logique personnalis&eacute;e pour un composant sera r&eacute;partie entre ces hooks de cycle de vie.</p><p>Ci-dessous se trouve le diagramme d&rsquo;un cycle de vie d&rsquo;une instance. Vous n&rsquo;avez pas besoin de tout comprendre de A &agrave; Z &agrave; ce stade, mais ce diagramme pourra vous &ecirc;tre utile dans le futur.</p><p><img src="https://fr.vuejs.org/images/lifecycle.png" style="width: 500px;" class="fr-fic fr-dib"></p><p>il y&#39;a donc au total huit diff&eacute;rents hooks, les plus utilis&eacute;s sont en g&eacute;n&eacute;ral <strong>beforeMount</strong>,&nbsp;<strong>destroyed, updated</strong>.</p>